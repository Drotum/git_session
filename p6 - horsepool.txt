def build_bad_match_table(pattern):
    m = len(pattern)
    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    bad_match_table = {}

    for char in alphabet:
        bad_match_table[char] = m

    for i in range(m - 1):
        bad_match_table[pattern[i]] = m - 1 - i

    return bad_match_table

def horspool(pattern, text):
    pattern = pattern.upper()
    text = text.upper()
    m = len(pattern)
    n = len(text)
    bad_match_table = build_bad_match_table(pattern)

    i = m - 1  

    while i < n:
        k = 0
        while k < m and pattern[m - 1 - k] == text[i - k]:
            k += 1
        if k == m:
            return i - m + 1  # Match found
        else:
            shift = bad_match_table.get(text[i], m)
            i += shift  # Shift pattern

    return -1  # No match found

# Test the function
text = "HERE IS A SIMPLE EXAMPLE"
pattern = "EXAMPLE"
index = horspool(pattern, text)
if index != -1:
    print(f"Pattern found at index: {index}")
else:
    print("Pattern not found")