import numpy as np

# Warshall's algorithm
def warshall(n, graph):
    reach = np.copy(graph)
    for k in range(n):
        for i in range(n):
            for j in range(n):
                reach[i][j] = reach[i][j] or (reach[i][k] and reach[k][j])
    return reach

# Floyd's algorithm
def floyd(n, graph):
    dist = np.copy(graph)
    for k in range(n):
        for i in range(n):
            for j in range(n):
                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])
    return dist

# Test the functions
graph = [
    [0, 1, np.inf, 1],
    [np.inf, 0, 1, np.inf],
    [np.inf, np.inf, 0, 1],
    [1, np.inf, np.inf, 0]
]

n = len(graph)
print("Transitive closure (Warshall's algorithm):")
print(warshall(n, graph))
print("Shortest paths (Floyd's algorithm):")
print(floyd(n, graph))
